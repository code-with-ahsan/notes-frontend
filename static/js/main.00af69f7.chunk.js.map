{"version":3,"sources":["components/Note/Note.tsx","constants/api.ts","services/notesService.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Note","note","onNoteUpdate","onNoteDelete","useState","isFocused","setIsFocused","className","onClick","type","aria-label","onBlur","event","newTextValue","currentTarget","textContent","text","console","log","updatedNoteObject","onFocus","contentEditable","suppressContentEditableWarning","href","link","NOTES_API_URL","getNotes","a","axios","get","response","data","notes","error","createNote","newNote","post","deleteNote","noteToDeleteId","url","delete","reply","updateNote","noteToUpdate","_id","put","App","notesList","setNotesList","showAddNoteModal","setShowAddNoteModal","setNewNote","handleCloseAddModal","useEffect","getNotesFromServer","updateNoteItem","updatedNote","noteFromServer","updatedList","map","noteItem","deleteNoteItem","noteToDelete","remainingNotes","filter","addNote","savedNote","Button","variant","Modal","show","onHide","Header","closeButton","Title","Body","FloatingLabel","controlId","label","Form","Control","onChange","newVal","value","as","placeholder","style","height","Footer","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.00af69f7.chunk.js","sourcesContent":["import { FC, FocusEvent, useState } from \"react\";\r\nimport INote from \"../../interfaces/note.interface\";\r\nimport \"./Note.css\";\r\n\r\ntype Props = {\r\n  note: INote;\r\n  onNoteUpdate: (note: INote) => void;\r\n  onNoteDelete: (note: INote) => void;\r\n};\r\n\r\nconst Note: FC<Props> = ({ note, onNoteUpdate, onNoteDelete }) => {\r\n  const [isFocused, setIsFocused] = useState(false);\r\n\r\n  const noteTextUpdated = (event: FocusEvent<HTMLDivElement>) => {\r\n    setIsFocused(false);\r\n    const newTextValue = event.currentTarget.textContent;\r\n    if (newTextValue === note.text) {\r\n      return;\r\n    }\r\n    console.log(\"note text changed\");\r\n    const updatedNoteObject: INote = {\r\n      ...note,\r\n      text: newTextValue || \"\",\r\n    };\r\n    onNoteUpdate(updatedNoteObject);\r\n  };\r\n\r\n  return (\r\n    <div className={isFocused ? \"note note--focused\" : \"note\"}>\r\n      <button\r\n        onClick={() => {\r\n          onNoteDelete(note);\r\n        }}\r\n        type=\"button\"\r\n        className=\"btn-close\"\r\n        aria-label=\"Close\"\r\n      ></button>\r\n      <div\r\n        onBlur={noteTextUpdated}\r\n        onFocus={() => {\r\n          setIsFocused(true);\r\n        }}\r\n        contentEditable={true}\r\n        suppressContentEditableWarning={true}\r\n        className=\"note__text\"\r\n      >\r\n        {note.text}\r\n      </div>\r\n      <div className=\"note__link\">\r\n        <a href={note.link}>link</a>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Note;\r\n","// const API_BASE_URL = 'http://localhost:5000';\r\nexport const API_BASE_URL = \"https://cwa-notes-backend.herokuapp.com\";\r\n\r\nexport const NOTES_API_URL = `${API_BASE_URL}/notes`;\r\n","import axios from \"axios\";\r\nimport { NOTES_API_URL } from \"../constants/api\";\r\nimport INote from \"../interfaces/note.interface\";\r\n\r\nexport const getNotes = async () => {\r\n  try {\r\n    const response = await axios.get(NOTES_API_URL);\r\n    return response.data.notes;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n\r\nexport const createNote = async (newNote: Partial<INote>) => {\r\n  try {\r\n    const response = await axios.post(NOTES_API_URL, newNote);\r\n    return response.data.note;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n\r\nexport const deleteNote = async (noteToDeleteId: string) => {\r\n  try {\r\n    const url = `${NOTES_API_URL}/${noteToDeleteId}`;\r\n    const response = await axios.delete(url);\r\n    return response.data.reply;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n\r\nexport const updateNote = async (noteToUpdate: INote) => {\r\n  try {\r\n    const url = `${NOTES_API_URL}/${noteToUpdate._id}`;\r\n    const response = await axios.put(url, noteToUpdate);\r\n    return response.data.note;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n","import \"./App.css\";\r\nimport { useEffect, useState } from \"react\";\r\nimport Note from \"./components/Note/Note\";\r\nimport INote from \"./interfaces/note.interface\";\r\nimport {\r\n  createNote,\r\n  deleteNote,\r\n  getNotes,\r\n  updateNote,\r\n} from \"./services/notesService\";\r\nimport { Button, FloatingLabel, Modal, Form } from \"react-bootstrap\";\r\n\r\nfunction App() {\r\n  const [notesList, setNotesList] = useState<Array<INote>>([]);\r\n  const [showAddNoteModal, setShowAddNoteModal] = useState(false);\r\n  const [newNote, setNewNote] = useState<Partial<INote>>({\r\n    link: \"\",\r\n    text: \"\",\r\n  });\r\n\r\n  const handleCloseAddModal = () => {\r\n    setNewNote({\r\n      link: \"\",\r\n      text: \"\",\r\n    });\r\n    setShowAddNoteModal(false);\r\n  };\r\n  const handleShowAddModal = () => setShowAddNoteModal(true);\r\n  // App components renders the first time\r\n  useEffect(() => {\r\n    getNotesFromServer();\r\n  }, []);\r\n\r\n  const getNotesFromServer = async () => {\r\n    const notes = await getNotes();\r\n    setNotesList(notes);\r\n  };\r\n\r\n  const updateNoteItem = async (updatedNote: INote) => {\r\n    const noteFromServer = await updateNote(updatedNote);\r\n    // temporary variable\r\n    const updatedList = notesList.map((noteItem: INote) => {\r\n      if (noteItem._id === noteFromServer._id) {\r\n        return noteFromServer;\r\n      }\r\n      return noteItem;\r\n    });\r\n    setNotesList(updatedList); // updating the state of notes list\r\n  };\r\n\r\n  const deleteNoteItem = async (noteToDelete: INote) => {\r\n    await deleteNote(noteToDelete._id);\r\n    const remainingNotes = notesList.filter((noteItem) => {\r\n      return noteItem._id !== noteToDelete._id;\r\n    });\r\n    setNotesList(remainingNotes);\r\n  };\r\n\r\n  const addNote = async () => {\r\n    const savedNote = await createNote(newNote);\r\n    setNotesList([...notesList, savedNote]);\r\n    handleCloseAddModal();\r\n  };\r\n\r\n  return (\r\n    //\r\n    <div className=\"App\">\r\n      <Button\r\n        variant=\"dark\"\r\n        className=\"add-button\"\r\n        onClick={handleShowAddModal}\r\n      >\r\n        <div className=\"add-button-text\">+</div>\r\n      </Button>\r\n\r\n      <Modal show={showAddNoteModal} onHide={handleCloseAddModal}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Add Note</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <FloatingLabel controlId=\"floatingTextarea2\" label=\"Text\">\r\n            <Form.Control\r\n              onChange={(event) => {\r\n                const newVal = event.currentTarget.value;\r\n                setNewNote({\r\n                  ...newNote,\r\n                  text: newVal,\r\n                });\r\n              }}\r\n              as=\"textarea\"\r\n              placeholder=\"Enter your note text\"\r\n              style={{ height: \"100px\" }}\r\n            />\r\n          </FloatingLabel>\r\n          <FloatingLabel\r\n            controlId=\"floatingTextarea\"\r\n            label=\"Link\"\r\n            className=\"mb-3 note-link\"\r\n          >\r\n            <Form.Control\r\n              onChange={(event) => {\r\n                const newVal = event.currentTarget.value;\r\n                setNewNote({\r\n                  ...newNote,\r\n                  link: newVal,\r\n                });\r\n              }}\r\n              type=\"url\"\r\n              placeholder=\"Enter note url\"\r\n            />\r\n          </FloatingLabel>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={handleCloseAddModal}>\r\n            Close\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={addNote}>\r\n            Create\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <div className=\"notes-list\">\r\n        {notesList.map((noteItem, index) => {\r\n          return (\r\n            <Note\r\n              note={noteItem}\r\n              onNoteDelete={deleteNoteItem}\r\n              onNoteUpdate={updateNoteItem}\r\n              key={index}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}